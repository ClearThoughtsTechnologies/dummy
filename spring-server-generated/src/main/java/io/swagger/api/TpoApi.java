/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.13).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.TPO;
import io.swagger.model.TPOUnregistered;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-10-17T12:40:01.504Z[GMT]")
@Api(value = "tpo", description = "the tpo API")
public interface TpoApi {

    @ApiOperation(value = "", nickname = "tpoGet", notes = "Get all drive listing", response = TPO.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of TPO object", response = TPO.class) })
    @RequestMapping(value = "/tpo",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TPO> tpoGet(@ApiParam(value = "page number") @Valid @RequestParam(value = "pageNum", required = false) Integer pageNum,@ApiParam(value = "No of elements in page") @Valid @RequestParam(value = "noOfElements", required = false) Integer noOfElements);


    @ApiOperation(value = "", nickname = "tpoPost", notes = "Register a new TPO", response = TPO.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The TPO details", response = TPO.class) })
    @RequestMapping(value = "/tpo",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<TPO> tpoPost(@ApiParam(value = ""  )  @Valid @RequestBody TPO body);


    @ApiOperation(value = "", nickname = "tpoPut", notes = "Modify a TPO", response = TPO.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The TPO details", response = TPO.class) })
    @RequestMapping(value = "/tpo",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<TPO> tpoPut(@ApiParam(value = ""  )  @Valid @RequestBody TPO body);


    @ApiOperation(value = "", nickname = "tpoRegistrationUUIDGet", notes = "This url will be used to fetch tpo basic information. While tpo open the mailed link and trying to register himself. Frontend will fetch stored TPO info by this URL. registrationUUID will be a variable and dynamic one and that is sent by mail.", response = TPOUnregistered.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The unregistered TPO detail", response = TPOUnregistered.class),
        @ApiResponse(code = 404, message = "") })
    @RequestMapping(value = "/tpo/registrationUUID",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TPOUnregistered> tpoRegistrationUUIDGet();


    @ApiOperation(value = "", nickname = "tpoTpoIdGet", notes = "Return specified TPO object", response = TPO.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The TPO details", response = TPO.class),
        @ApiResponse(code = 404, message = "") })
    @RequestMapping(value = "/tpo/tpoId",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TPO> tpoTpoIdGet();

}
